name: Directus Data Sync

on:
  repository_dispatch:
    types: [directus-data-update]
  workflow_dispatch: # Allow manual triggering for testing

jobs:
  sync-data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --filter @frontend.mu/data --frozen-lockfile

      - name: Build data
        run: pnpm run data build

      - name: Check for changes
        id: changes
        run: |
          if [ -n "$(git status --porcelain packages/frontendmu-data/data/)" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in data files"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in data files"
          fi

      - name: Create or Update Pull Request
        if: steps.changes.outputs.changes == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Fixed branch name for CMS updates
          BRANCH_NAME="cms/data-updates"
          COMMIT_TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
          
          # Check if branch already exists
          if git ls-remote --exit-code --heads origin "${BRANCH_NAME}"; then
            echo "Branch ${BRANCH_NAME} exists, updating existing PR"
            # Copy the new data files to a temp location
            cp -r packages/frontendmu-data/data /tmp/new-data
            # Reset any local changes to allow clean checkout
            git reset --hard HEAD
            # Switch to existing branch and pull latest
            git fetch origin "${BRANCH_NAME}"
            git checkout "${BRANCH_NAME}"
            git merge origin/main --no-edit
            # Replace data files with the new ones
            cp -r /tmp/new-data/* packages/frontendmu-data/data/
          else
            echo "Creating new branch ${BRANCH_NAME}"
            # Create new branch from main
            git checkout -b "${BRANCH_NAME}"
          fi
          
          # Add all changes in the data directory
          git add packages/frontendmu-data/data/
          
          # Create commit with timestamp
          git commit -m "(cms): data updated ${COMMIT_TIMESTAMP}"
          
          # Push the branch
          git push origin "${BRANCH_NAME}"
          
          # Check if an open PR exists for this branch
          PR_STATE=$(gh pr view "${BRANCH_NAME}" --json state --jq '.state' 2>/dev/null || echo "NOT_FOUND")
          
          if [ "$PR_STATE" = "OPEN" ]; then
            echo "Open pull request exists, updating with new commit"
            # Update PR body with latest timestamp
            gh pr edit "${BRANCH_NAME}" \
              --body "Automated data sync from Directus CMS.

          **Latest update:** ${COMMIT_TIMESTAMP}

          This PR contains automated updates from Directus collections. Each commit represents a data sync triggered by CMS changes.
          
          This PR will be updated automatically when new data changes are detected."
          elif [ "$PR_STATE" = "MERGED" ] || [ "$PR_STATE" = "CLOSED" ]; then
            echo "Previous PR was ${PR_STATE,,}, creating new pull request"
            gh pr create \
              --title "(cms): data updates" \
              --body "Automated data sync from Directus CMS.

          **Latest update:** ${COMMIT_TIMESTAMP}

          This PR contains automated updates from Directus collections. Each commit represents a data sync triggered by CMS changes.
          
          This PR will be updated automatically when new data changes are detected." \
              --head "${BRANCH_NAME}" \
              --base main
          else
            echo "No existing PR found, creating new pull request"
            gh pr create \
              --title "(cms): data updates" \
              --body "Automated data sync from Directus CMS.

          **Latest update:** ${COMMIT_TIMESTAMP}

          This PR contains automated updates from Directus collections. Each commit represents a data sync triggered by CMS changes.
          
          This PR will be updated automatically when new data changes are detected." \
              --head "${BRANCH_NAME}" \
              --base main
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: No changes summary
        if: steps.changes.outputs.changes == 'false'
        run: echo "No data changes detected. Repository is up to date."
